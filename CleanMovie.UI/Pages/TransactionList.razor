@page "/moviesrentaltrans"
@inject IMoviesRentalTransactionService MoviesRentalTransactionService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "admin,staff")]
@inject DialogService dialogService
@inject AuthenticationStateProvider AuthStateProvider

<h3>MoviesRentalTransaction</h3>
@*<EditForm Model="@criteriaData" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="usernamecustomer">UserName Customer</label>
        <InputText id="usernamecustomer" @bind-Value="criteriaData.UserNameCustomer" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="usernamestaffrent">UserName Staff Rent </label>
        <InputText id="usernamestaffrent" @bind-Value="criteriaData.UserNameStaffRent" class="form-control"></InputText>
    </div>

    <div class="form-group row">
        <label for="rentdate" class="col-sm-2 col-form-label">Rent Date</label>
        <div class="col-sm-10">
            <InputDate id="rentdate" @bind-Value="criteriaData.RentDate" class="form-control"></InputDate>
        </div>

    </div>

    <br />
    <button type="submit" class="btn btn-primary">Search</button>
</EditForm>*@
<EditForm Model="@criteriaData" OnSubmit="HandleSubmit">
    <RadzenCard Style="width: 500px;">
        <div class="container">
            <div class="row">
                <div class="col-sm-3 col-md-6">
                    <RadzenText TextStyle=" TextStyle.Subtitle2" TagName="TagName.H3" Class="d-flex mt-3 mb-0" Style="color: var(--rz-text-tertiary-color);">UserName Customer</RadzenText>
                    <RadzenTextBox @bind-Value="criteriaData.UserNameCustomer" Name="UserNameCustomer" Style="display: block;" />
                </div>
                <div class="col-sm-3 col-md-6">
                    <RadzenText TextStyle=" TextStyle.Subtitle2" TagName="TagName.H3" Class="d-flex mt-3 mb-0" Style="color: var(--rz-text-tertiary-color);">UserName Staff Rent</RadzenText>
                    <RadzenTextBox @bind-Value="criteriaData.UserNameStaffRent" Name="UserNameStaffRent" Style="display: block;" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-3 col-md-6">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3" Class="d-flex mt-3 mb-0" Style="color: var(--rz-text-tertiary-color);">RentDate Date</RadzenText>
                    <RadzenDatePicker Style="100%" @bind-Value="criteriaData.RentDate" Name="RentDate" />
                </div>

            </div>
        </div>

        <div style="padding:10px;">
            <RadzenButton ButtonType="ButtonType.Submit" Shade="Shade.Lighter" ButtonStyle="ButtonStyle.Primary" Text="Search" />
        </div>

    </RadzenCard>
</EditForm>


@*<table class="table">
    <thead>
        <tr>
            <th>Movie Name</th>
            <th>Cost</th>
            <th>Rental date</th>
            <th>Return date</th>
            <th>Late Fines</th>
            <th>Customer Name</th>
            <th>Staff Rental Name</th>
            <th>Manage</th>
        </tr>
    </thead>
    <tbody>
        @if (MoviesRentalTransactionService.MoviesRentalTransaction.Count > 0)
        {
            foreach (var trans in MoviesRentalTransactionService.MoviesRentalTransaction)
            {
                <tr>
                    <td>@trans?.Movie?.Name</td>
                    <td>@trans?.Movie?.Cost</td>
                    <td>@trans?.RentDate.ToString("dd/MM/yyyy HH:mm:ss")</td>
                    <td>@trans?.ReturnDate.ToString("dd/MM/yyyy HH:mm:ss")</td>
                    <td>@trans?.LateFines</td>
                    <td>@trans?.UserLoginDtoCustomer?.FirstName</td>
                    <td>@trans?.UserLoginDtoStaffRent?.FirstName</td>

                    <td>
                        <button class="btn btn-primary" @onclick="(()=> ShowMovieTrans(trans.Id))"><i class="oi oi-pencil"></i></button>&nbsp;
                        <button class="btn btn-danger" @onclick="(()=>DeleteTransaction(trans.Id))"><i class="oi oi-trash"></i></button>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>*@

@*<button class="btn btn-primary" @onclick="CreateNewTransaction">Create New</button>*@
<div class="row" style="padding:20px;">
    <div class="col"><RadzenButton Text="Create New" Click="@(args=>CreateNewTransaction())" /></div>

</div>


<RadzenDataGrid @ref="transGrid" AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" AllowColumnPicking="true" AllowGrouping="true"
                AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                SelectionMode="DataGridSelectionMode.Single"
                Data="@MoviesRentalTransactionService.MoviesRentalTransaction" TItem="DataGridTransactions" ColumnWidth="500px" LogicalFilterOperator="LogicalFilterOperator.Or" GridLines="@GridLines"
                EditMode="DataGridEditMode.Single">

    <Columns>
        <RadzenDataGridColumn TItem="DataGridTransactions" Property="Id" Filterable="false" Title="ID" Frozen="true" Width="100px" TextAlign="TextAlign.Center" />

        <RadzenDataGridColumn TItem="DataGridTransactions" Property="MovieName" Filterable="false" Title="Name" Width="150px" TextAlign="TextAlign.Left">
            @*<EditTemplate Context="trans">
            <RadzenTextBox @bind-Value="trans.Movie.Name" Name="Name" Style="width:100%; display: block;" />
            <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>*@
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="DataGridTransactions" Property="MovieCost" Filterable="false" Title="Cost" Width="150px" TextAlign="TextAlign.Right">
            @* <EditTemplate Context="trans">
            <RadzenNumeric @bind-Value="trans.Movie.Cost" Name="Cost" Style="width:100%; display: block;" />
            <RadzenRequiredValidator Text="Cost is required" Component="Cost" Popup="true" />
            </EditTemplate>*@
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="DataGridTransactions" Property="RentDate" Filterable="false" FormatString="{0:d}" Title="Rent Date" Width="150px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="DataGridTransactions" Property="ReturnDate" Filterable="false" FormatString="{0:d}" Title="Return Date" Width="150px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="DataGridTransactions" Property="LateFines" Filterable="false" Title="Late Fines" Width="150px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="DataGridTransactions" Property="CustomerFirstName" Filterable="false" Title="Customer Name" Width="150px" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn TItem="DataGridTransactions" Property="StaffRentFirstName" Filterable="false" Title="Staff Rent" Width="150px" TextAlign="TextAlign.Left" />
        <RadzenDataGridColumn TItem="DataGridTransactions" Property="StaffReturnFirstName" Filterable="false" Title="Staff Return" Width="150px" TextAlign="TextAlign.Left" />

        <RadzenDataGridColumn TItem="DataGridTransactions" Context="trans" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="200px">
            <Template Context="trans">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditTransaction(trans))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => OpenConfirm(trans))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>

        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@code {
    //[Parameter] public int OrderID { get; set; }
    RadzenDataGrid<DataGridTransactions>? transGrid;
    DataGridGridLines GridLines = DataGridGridLines.Default;
    CriteriaTransaction criteriaData = new CriteriaTransaction();

    async Task HandleSubmit()
    {
        await MoviesRentalTransactionService.GetMoviesRentalTransactionByCriteria(criteriaData);

    }

    void ShowMovieTrans(int id)
    {
        NavigationManager.NavigateTo($"/migratetransactions/{id}");
    }

    async Task CreateNewTransaction()
    {
        //NavigationManager.NavigateTo("/migratetransactions");
        MoviesRentalTransaction moviesRentalTransaction = null;
        //MoviesRentalTransaction moviesRentalTransaction = new MoviesRentalTransaction()
        //    {
        //        Movie = new Movie(),
        //        UserLoginDtoCustomer = new UserLoginDto()

        //    };
        var result = await dialogService.OpenAsync<TransactionManageDialog>("Create Transaction",
            new Dictionary<string, object> { { "Data", null } }
            , new DialogOptions() { Width = "700px", Height = "512px", Resizable = false, Draggable = false });
        if (result != null)
        {
            moviesRentalTransaction = result;
            await MoviesRentalTransactionService.CreateTransaction(moviesRentalTransaction);
        }
    }

    async Task DeleteTransaction(int id)
    {
        await MoviesRentalTransactionService.DeleteTransaction(id);
    }

    async Task EditTransaction(DataGridTransactions trans)
    {
        var res = await MoviesRentalTransactionService.OpenEditDialog(trans);
        if (res != null)
        {
            var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authstate.User;
            res.StaffReturnId = Convert.ToInt32(((ClaimsIdentity)user?.Identity)?.FindFirst("userid")?.Value?.ToString());
            await MoviesRentalTransactionService.UpdateTransaction(res);
        }
        await MoviesRentalTransactionService.GetMoviesRentalTransactionByCriteria(criteriaData);
    }

    async Task OpenConfirm(DataGridTransactions data)
    {
        var result = await dialogService.OpenAsync<ConfirmDialog>("Confirm Delete");
        if (result != null && result == true)
        {
            await DeleteTransaction(data.Id);
        }
    }

}
