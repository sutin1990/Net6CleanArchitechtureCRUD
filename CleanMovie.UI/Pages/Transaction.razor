<h3>Transaction</h3>
@page "/migratetransactions"
@page "/migratetransactions/{id:int}"
@inject NavigationManager NavigationManager
@inject IMoviesRentalTransactionService MoviesRentalTransactionService
@inject IUsersService UsersService
@inject IMovieService MovieService
@attribute [Authorize(Roles = "admin,staff")]
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage


@if (Id == null)
{
    <PageTitle>Create a new transactions</PageTitle>
    <h3>Create a new transactions</h3>
}
else
{
    <PageTitle>Edit @mt.Movie.Name</PageTitle>
    <h3>Edit @mt.Movie.Name</h3>
}

<button class="btn btn-primary" @onclick="BackToTransactionList">Back</button>

<EditForm Model="@mt" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*<div class="form-group">
    <label for="moviename">Movie Name</label>
    <InputText id="moviename" @bind-Value="mt.Movie.Name" class="form-control"></InputText>
    </div>
    <div class="form-group">
    <label for="cost">Cost</label>
    <InputNumber  id="cost" @bind-Value="mt.Cost" class="form-control"></InputNumber>
    </div>*@

    <div class="form-group">
        <label for="movies" class="col-sm-2 col-form-label">Movies List: </label>
        <div class="col-sm-10">
            <InputSelect id="movies" @bind-Value="mt.MovieId" class="form-select">
                @foreach (var movie in MovieService.Movies)
                {
                    <option value="@movie.Id">@movie.Name</option>
                }
            </InputSelect>
        </div>
    </div>

    <div class="form-group">
        <div class="form-group">
            <label for="rentdate" class="col-sm-2 col-form-label">Rent Date: </label>
            <div class="col-sm-10">
                <InputDate id="rentdate" @bind-Value="mt.RentDate" class="form-control"></InputDate>
            </div>

        </div>

        <div class="form-group">
            <label for="expirydate" class="col-sm-2 col-form-label">Expiry Date:</label>
            <div class="col-sm-10">
                <InputDate id="expirydate" @bind-Value="mt.ExpiryDate" class="form-control"></InputDate>
            </div>
        </div>

        @if (Id != null)
        {
            <div class="form-group">
                <label for="rentdate" class="col-sm-2 col-form-label">Return Date: </label>
                <div class="col-sm-10">
                    <InputDate id="rentdate" @bind-Value="mt.ReturnDate" class="form-control"></InputDate>
                </div>
            </div>

            <div class="form-group">
                <label for="latefines" class="col-sm-2 col-form-label">Late Fines: </label>
                <div class="col-sm-10">
                    <InputNumber id="latefines" @bind-Value="mt.LateFines" class="form-control"></InputNumber>
                </div>
            </div>
        }


        <div class="form-group row">
            <label for="customer" class="col-sm-2 col-form-label">Customers List: </label>
            <div class="col-sm-10">
                <InputSelect id="customer" @bind-Value="mt.CutomerId" class="form-select">
                    @foreach (var user in UsersService.Customers)
                    {
                        <option value="@user.Id">@user.FirstName - @user.LastName</option>
                    }
                </InputSelect>
            </div>
        </div>

        <br />
        <div class="form-group">
            <div class="col-sm-offset-2 col-sm-10">

                <button type="submit" class="btn btn-primary">@btnText</button>
            </div>
        </div>
    </div>


</EditForm>
@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    public bool isHide;
    private EditContext editContext = default!;
    private ValidationMessageStore messageStore;
    MoviesRentalTransaction mt = new MoviesRentalTransaction()
        {
            Movie = new Movie(),
            UserLoginDtoCustomer = new UserLoginDto()

        };
    UserLoginDto request = new UserLoginDto();

    protected override async Task OnInitializedAsync()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        btnText = Id == null ? "Save New Transaction" : "Update Transaction";
        isHide = (Id == null);


        await UsersService.GetUsers(null);
        await MovieService.GetAllMovies();

        if (Id != null)
        {
            mt.StaffReturnId = Convert.ToInt32(((ClaimsIdentity)user?.Identity)?.FindFirst("userid")?.Value?.ToString());
        }
        else
        {
            mt.StaffRentId = Convert.ToInt32(((ClaimsIdentity)user?.Identity)?.FindFirst("userid")?.Value?.ToString());
        }
        //editContext = new EditContext(hero);
        //messageStore = new ValidationMessageStore(editContext);
        //editContext.OnValidationRequested += OnValidationRequested;

    }

    private void OnValidationRequested(object sender, ValidationRequestedEventArgs e)
    {
        messageStore.Clear();
        if (mt.RentDate == DateTime.MinValue)
        {
            messageStore.Add(() => mt.RentDate, "Value is required");
        }
    }

    async Task HandleSubmit()
    {
        var authstate = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        if (Id == null)
        {
            await MoviesRentalTransactionService.CreateTransaction(mt);
        }
        else
        {
            mt.StaffReturnId = Convert.ToInt32(((ClaimsIdentity)user?.Identity)?.FindFirst("userid")?.Value?.ToString());
            await MoviesRentalTransactionService.UpdateTransaction(mt);
        }

    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)//create
        {
            mt.UserLoginDtoCustomer = UsersService.Customers[0];
            mt.CutomerId = UsersService.Customers[0].Id;

            mt.Movie = null;
            mt.MovieId = MovieService.Movies[0].Id;
        }
        else//edit
        {
            mt = await MoviesRentalTransactionService.GetMoviesRentalTransactionById((int)Id);
        }
    }

    async Task BackToTransactionList()
    {
        NavigationManager.NavigateTo("moviesrentaltrans");
    }
}
