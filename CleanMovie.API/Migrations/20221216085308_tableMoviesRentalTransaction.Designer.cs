// <auto-generated />
using System;
using CleanMovie.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CleanMovie.API.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20221216085308_tableMoviesRentalTransaction")]
    partial class tableMoviesRentalTransaction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CleanMovie.Domain.DBModels.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MoviesRentalTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MoviesRentalTransactionId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("CleanMovie.Domain.DBModels.MoviesRentalTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CutomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("LateFines")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffRentId")
                        .HasColumnType("int");

                    b.Property<int>("StaffReturnId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MoviesRentalTransactions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CutomerId = 2,
                            ExpiryDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LateFines = 0m,
                            MovieId = 8,
                            RentDate = new DateTime(2022, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StaffRentId = 1,
                            StaffReturnId = 0
                        });
                });

            modelBuilder.Entity("CleanMovie.Domain.DBModels.UserLoginDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoviesRentalTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRolesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoviesRentalTransactionId");

                    b.HasIndex("UserRolesId");

                    b.ToTable("UserLoginDtos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "sutin1990@hotmail.com",
                            FirstName = "",
                            LastName = "",
                            Password = "250933",
                            UserName = "sutin1990",
                            UserRolesId = 1
                        });
                });

            modelBuilder.Entity("CleanMovie.Domain.DBModels.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            RoleName = "staff"
                        },
                        new
                        {
                            Id = 3,
                            RoleName = "member"
                        });
                });

            modelBuilder.Entity("CleanMovie.Domain.DBModels.Movie", b =>
                {
                    b.HasOne("CleanMovie.Domain.DBModels.MoviesRentalTransaction", null)
                        .WithMany("Movie")
                        .HasForeignKey("MoviesRentalTransactionId");
                });

            modelBuilder.Entity("CleanMovie.Domain.DBModels.UserLoginDto", b =>
                {
                    b.HasOne("CleanMovie.Domain.DBModels.MoviesRentalTransaction", null)
                        .WithMany("UserLoginDto")
                        .HasForeignKey("MoviesRentalTransactionId");

                    b.HasOne("CleanMovie.Domain.DBModels.UserRoles", "UserRoles")
                        .WithMany()
                        .HasForeignKey("UserRolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CleanMovie.Domain.DBModels.MoviesRentalTransaction", b =>
                {
                    b.Navigation("Movie");

                    b.Navigation("UserLoginDto");
                });
#pragma warning restore 612, 618
        }
    }
}
